"use client";
import { fnCss } from "nextjs-tools";
import React, { Fragment } from "react";
export default function ({ buttons, page, size, total, onClick }) {
    buttons = buttons || 3;
    const last = Math.floor(total / size) + (0 < Math.floor(total / size) && 0 < total % size ? 1 : 0);
    const left = [];
    const right = [];
    for (let i = 1; i <= buttons; i++) {
        if (0 <= page - i) {
            left.push(page - i);
        }
        if (page + i <= last) {
            right.push(page + i);
        }
    }
    const items = [...left, page, ...right].sort((a, b) => a - b);
    const hasPrev = items.findIndex((v) => v === 0) === -1;
    const hasNext = items.findIndex((v) => v === last) === -1;
    const onNavigate = (page) => {
        if (onClick)
            onClick(page);
    };
    return (<div className="flex justify-center items-center no-drag">
			<div className={fnCss.concat("pager hover", page === 0 ? "disabled" : "")} onClick={() => {
            if (page === 0)
                return;
            onNavigate(page - 1);
        }}>
				{"<"}
			</div>

			{hasPrev && (<Fragment>
					<div className="pager hover" onClick={() => onNavigate(0)}>
						1
					</div>
					<div className="pager">...</div>
				</Fragment>)}

			{items.map((i, key) => (<div className={fnCss.concat("pager hover", page === i ? "active" : "")} key={key} onClick={() => {
                if (page === i)
                    return;
                onNavigate(i);
            }}>
					{i + 1}
				</div>))}

			{hasNext && (<Fragment>
					<div className={fnCss.concat("pager")}>...</div>
					<div className="pager hover" onClick={() => onNavigate(last + 1)}>
						{last + 1}
					</div>
				</Fragment>)}

			<div className={fnCss.concat("pager hover", page === last ? "disabled" : "")} onClick={() => {
            if (page === last)
                return;
            onNavigate(page + 1);
        }}>
				{">"}
			</div>
		</div>);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanN4Iiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXAvcGFnZXIvYmFzZS9pbmRleC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDO0FBQ2IsT0FBTyxFQUFDLEtBQUssRUFBQyxNQUFNLGNBQWMsQ0FBQztBQUNuQyxPQUFPLEtBQUssRUFBRSxFQUFDLFFBQVEsRUFBQyxNQUFNLE9BQU8sQ0FBQztBQVV0QyxNQUFNLENBQUMsT0FBTyxXQUFXLEVBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBUTtJQUNwRSxPQUFPLEdBQUcsT0FBTyxJQUFJLENBQUMsQ0FBQztJQUV2QixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNuRyxNQUFNLElBQUksR0FBYSxFQUFFLENBQUM7SUFDMUIsTUFBTSxLQUFLLEdBQWEsRUFBRSxDQUFDO0lBRTNCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUNuQyxJQUFJLENBQUMsSUFBSSxJQUFJLEdBQUcsQ0FBQyxFQUFFLENBQUM7WUFDbkIsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDckIsQ0FBQztRQUVELElBQUksSUFBSSxHQUFHLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQztZQUN0QixLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN0QixD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